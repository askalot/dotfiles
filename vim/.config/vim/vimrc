" Disable Vi compatibility
set nocompatible

" Map <Space> as <Leader>
let mapleader=' '

" Enable mouse
set mouse=a

" Check and install vim-plug
let vim_plug_path = expand('$XDG_CONFIG_HOME') . '/vim/autoload/plug.vim'
if empty(glob(vim_plug_path))
	silent execute '!curl -fLo ' . vim_plug_path . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" vim-plug
call plug#begin()

Plug 'metalelf0/base16-black-metal-scheme'
Plug 'rakr/vim-one'
Plug 'tpope/vim-commentary'
Plug 'preservim/nerdtree'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'preservim/tagbar'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'dense-analysis/ale'
Plug 'mattn/emmet-vim'
Plug 'kshenoy/vim-signature'
" fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" vim-airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Writing mode
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

call plug#end()

" Backup files
set backup
set backupdir=.backupdir,$MYVIMDIR/backupdir,/tmp//
set directory=.swp/,$MYVIMDIR/.swp/,/tmp//
set undodir=.undodir,$MYVIMDIR/undodir,/tmp//
set undofile

" Buffers
nnoremap <Leader>` :b#<CR>
" nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>b :buffers<CR>:buffer<Space>
nnoremap <Leader>bd :bdelete<CR>
nnoremap ]b :bnext<CR>
nnoremap [b :bprevious<CR>
nnoremap <Leader>t :enew<CR>
set hidden

" Colors
" colorscheme base16-black-metal-bathory
colorscheme one
" set background=dark
set background=light
set termguicolors

" Comments
nnoremap <Leader>/ :Commentary<CR>
vnoremap <Leader>/ :Commentary<CR>

" Config
nnoremap <Leader>fc :edit $MYVIMRC<CR>
nnoremap <Leader>sc :source $MYVIMRC<CR>

" Editing
set autoread
set backspace=eol,indent,start
set confirm
set noexpandtab
set scrolloff=5
set sidescrolloff=5
set shiftwidth=4
set tabstop=4
nmap <A-Down> ddp
nmap <A-Up> ddkP
vmap <A-Down> xp`[V`]
vmap <A-Up> xkP`[V`]
nnoremap <Leader>d "_d
vnoremap <Leader>d "_d
nnoremap <Leader>dd "_dd
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
nnoremap <Leader>q :q<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>x :x<CR>
nnoremap <Leader>y "+y
vnoremap <Leader>y "+y

" File explorer
let g:NERDTreeDirArrowExpandable=''
let g:NERDTreeDirArrowCollapsible=''
nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>o :NERDTreeFind<CR>
nnoremap <Leader>c :TagbarToggle<CR>

" Help
nnoremap <Leader>? :vert h<Space>

" Layout
highlight VertSplit guibg=NONE guifg=#111111
set colorcolumn=+1
set cursorline
set fillchars+=vert:\│
set listchars=""
" set listchars+=eol:↵
" set listchars+=eol:¬
" set listchars+=extends:>
set listchars+=nbsp:␣
" set listchars+=nbsp:+
" set listchars+=precedes:<
set listchars+=tab:→\ 
" set listchars+=tab:▸\ 
set listchars+=trail:·
set list
set number
set showcmd
set signcolumn=yes
set splitbelow
set splitright
set textwidth=80
set wildmenu

" Search
if executable('rg')
	set grepprg=rg\ --vimgrep
endif

set hlsearch
set ignorecase
set incsearch
set smartcase
nnoremap <Leader>f :Rg<CR>
" nnoremap <Leader>g :Rg<Space>
nnoremap <Leader>g :grep<Space>
" nnoremap <Leader>/ :grep<Space>
nnoremap <Leader>h :History<CR>
" nnoremap <Leader>j :Jumps<CR>
" nnoremap <Leader>k :Rg<Space><C-R><C-W><CR>
nnoremap <Leader>k :grep<Space><C-R><C-W><CR>
" nnoremap <Leader>k :grep!<Space><C-R><C-W> *<CR>:cwindow<CR>
nnoremap <Leader>l :nohlsearch<CR>
" nnoremap <Leader>m :Marks<CR>
nnoremap <Leader><Space> :Files<CR>
" TODO: Use vim-unimpaired instead?
" Navigate argument list
nnoremap [A :first<CR>
nnoremap ]A :last<CR>
nnoremap ]a :next<CR>
nnoremap [a :prev<CR>
" Navigate quickfix list
nnoremap [Q :cfirst<CR>
nnoremap ]Q :clast<CR>
nnoremap ]q :cnext<CR>
nnoremap [q :cprevious<CR>
augroup quickfix
	autocmd!
	autocmd QuickFixCmdPost [^l]* cwindow
	autocmd QuickFixCmdPost l* lwindow
augroup END

" Spelling
autocmd FileType markdown setlocal spell
autocmd FileType gitcommit setlocal spell
nnoremap <Leader>s :setlocal spell!<CR>
" Autocomplete with dictionary words when spell-check is enabled
set complete+=kspell

" Status
if !exists('g:airline_symbols')
	let g:airline_symbols={}
endif

let g:airline#extensions#tabline#buffers_label=''
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#formatter='unique_tail'
let g:airline_section_z='%p%%%{g:airline_symbols.linenr}%l/%L%{g:airline_symbols.colnr}%c'
let g:airline_symbols.branch=''
let g:airline_theme='base16_black_metal_bathory'

" Writing
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
nnoremap <Leader>z :Goyo<CR>

" Linting
let g:airline#extensions#ale#enabled=1
let g:ale_completion_enabled=1
let g:ale_fix_on_save=1
let g:ale_fixers={ 'javascript': ['eslint', 'prettier'] }
let g:ale_lint_on_enter=0
let g:ale_lint_on_save=1
let g:ale_sign_error='●'
let g:ale_sign_warning='⚠️'

" Autocomplete (imitate)
function AutocompleteTab()
	let col = col('.') - 1
	if !col
		return "\<Tab>"
	endif

	let char = getline('.')[col - 1]
	if char =~ '\k'
		return "\<C-P>"
	else
		return "\<Tab>"
	endif
endfunction
inoremap <expr> <Tab> AutocompleteTab()
inoremap <S-Tab> <C-N>

" Transparency?
" highlight NonText ctermbg=NONE guibg=NONE
" highlight EndOfBuffer ctermbg=NONE guibg=NONE
" highlight VertSplit guibg=NONE guifg=#111111
" highlight BufferLineFill ctermbg=NONE guibg=NONE
" highlight MsgArea ctermbg=235 ctermfg=White
